{% extends 'base_backend.html.twig' %}

{% block title %}
    Administration
{% endblock %}

{% block content %}

    <h1 class="text-center font-weight-bold">Gestion des blocages</h1>

    <div class="tab d-flex justify-content-center ml-4" role="tabpanel">
        <ul class="nav nav-tabs" role="tablist">
            <li class="nav-item" role="presentation">
                <a data-toggle="tab" href="#menu1" role="tab" class="tab-link text-primary">Annonces</a>
            </li>
            <li class="nav-item">
                <a data-toggle="tab" href="#menu2" role="tab" class="tab-link text-primary">Commentaires</a>
            </li>
            <li class="nav-item">
                <a data-toggle="tab" href="#menu3" role="tab" class="tab-link text-primary">Utilisateurs</a>
            </li>
        </ul>
    </div>
    

    <div class="tab-content">

        <div id="menu1" class="tab-pane active in content content_backend">
            <style>
                .content {
                    margin: 1em auto;
                    width: 80%;
                }
            </style>
            <h3 class="text-center font-weight-bold">Les annonces bloquées</h3>
            {% for post in posts %}

                {% if post.status.code == "BLOCKED" %}

                    <article class="mb-3 p-3 border border-dark">
                        <h3 class="font-weight-bold">
                            {{post.title}}
                        </h3>

                        <p>
                            {{post.description|raw}}
                        </p>

                        <p class="d-flex justify-content-end mr-2 font-italic">
                            <span>
                                par
                                {{post.user.username}}
                                le
                                {{ post.createdAt | date('d/m/Y à H:i') }}
                            </span>
                        </p>

                        <div class="d-flex justify-content-end">
                            <a class="btn btn-primary" href="{{ path ('ad_post_show', {'slug': post.slug}) }} ">Voir l'annonce</a>
                            {# Pour les paramètres de onclick, si le status du post est == a BLOCKED alors le param = UNBLOCKED #}
                            <button
                            {# attention, ne pas mettre le slug, laisser le id pour les fonctions ajax #}
                                type="button" class="btn btn-warning" onclick="handleStatusButtonAd(this,{{post.id}},{{post.status.code == 'BLOCKED' ? " 'UNBLOCKED' " : " 'BLOCKED' "}})">
                                {# Si le code du status du post est == a BLOCKED alors on ecrit Débloquer dans le bouton #}
                                <i class="fas fa-minus-circle"></i> {{post.status.code == "BLOCKED" ? "Débloquer l'annonce" : "Bloquer l'annonce"}}
                            </button>
                            {{include('backend/post/_delete_ad.html.twig')}}
                        </div>
                    </article>

                {% endif %}
            {% endfor %}
        </div>

        <div id="menu2" class="tab-pane fade content content_backend">

            <style>
                .content {
                    margin: 1em auto;
                    width: 80%;
                }
            </style>

            <h3 class="text-center font-weight-bold">Les commentaires bloqués</h3>

            <div class="card ml-5 my-3 pt-3 px-3 border border-dark">

                {% for comment in comments if comment.status.code == "BLOCKED" %}
                    <div class="card-body">
                        
                        <p class="card-text">
                            {{comment.description|striptags|raw}}
                        </p>

                        <p class="d-flex justify-content-end mr-2 font-italic">
                            <span>
                                Posté par
                                {{comment.user}}
                                le
                                {{ comment.createdAt | date('d/m/Y à H:i') }}
                            </span>
                        </p>

                        <div class="d-flex justify-content-end">
                            <a class="btn btn-primary" href="{{ path ('ad_post_show', {'slug': comment.post.slug}) }} ">Voir l'annonce correspondante</a>
                            <button
                                type="button" class="btn btn-warning" onclick="handleStatusButtonComment(this,{{comment.id}},{{comment.status.code == 'BLOCKED' ? " 'UNBLOCKED' " : " 'BLOCKED' "}})">
                                {# Si le code du status du post est == a BLOCKED alors on ecrit Débloquer dans le bouton #}
                                <i class="fas fa-minus-circle"></i> {{comment.status.code == "BLOCKED" ? "Débloquer le commentaire" : "Bloquer le commentaire"}}
                            </button>
                        </div>
                        
                        <hr>
                    </div>
                {% endfor %}
            </div>

        </div>


        <div id="menu3" class="tab-pane fade mx-5">

            <h3 class="text-center font-weight-bold">Les utilisateurs bloqués</h3>

            <div class="table-responsive">
                <table class="table table-striped userTable">

                    <thead class="position-sticky text-uppercase">

                        <tr>
                            <th scope="col">#Id</th>
                            <th scope="col">Prénom</th>
                            <th scope="col">Nom</th>
                            <th scope="col">Pseudo</th>
                            <th scope="col">Entreprise</th>
                            <th scope="col">Naissance</th>
                            <th scope="col">Email</th>
                            <th scope="col">Adresse</th>
                            <th scope="col">Téléphone</th>
                            <th scope="col">Inscrit depuis</th>
                            <th scope="col">Tag(s)</th>
                            <th scope="col">Job(s)</th>
                            <th scope="col">Role</th>
                        </tr>

                    </thead>

                    <tbody>

                        {% for user in users if user.status.code == "BLOCKED" %}
                            <tr>
                                <th scope="row">{{user.id}}</th>
                                <td>{{user.firstname}}</td>
                                <td>{{user.lastname}}</td>
                                <td>{{user.username}}</td>
                                <td>{{user.companyname}}</td>
                                <td>{{user.birthdate | date('d/m/Y à H:i') }}</td>
                                <td>{{user.email}}</td>
                                <td>{{user.address}}</td>
                                <td>{{user.phonenumber}}</td>
                                <td>{{user.createdAt| date('d/m/Y à H:i')}}</td>
                                <td>{{user.slug}}</td>
                                <td>
                                    {% for job in user.jobs %}
                                        {{job.name}}
                                    {% endfor %}
                                </td>
                                <td >
                                    <div class="form-group">
                                        {# onchange : premier paramètre 'this' renvoie l'élément html où il se trouve, donc Select dans notre cas #}
                                        {# le deuxième paramètre est généré par twig c'est l'id du user #}
                                            <select class="form-control" id="select_role_{{user.id}}" onchange="handleRoleSelect(this, {{user.id}})"> {% for role in roles %}
                                                {# " ? et : " = Ternaire. Si le code du role du user est == au code du role dans notre boucle, alors affiche selected #}
                                                {# selected affichera directement le role par défaut du user #}
                                                    <option value="{{role.id}}" {{user.role.code == role.code ? "selected" : ""}}> {{role.name}}</option>
                                            {% endfor %}
                                        </select>
                                    </div>
                                </td>
                                <td class="d-flex">
                                    {# Pour les paramètres de onclick, si le status du post est == a BLOCKED alors le param = UNBLOCKED #}
                                    <button
                                        type="button" class="btn btn-warning" onclick="handleStatusButtonUser(this,{{user.id}},{{user.status.code == 'BLOCKED' ? " 'UNBLOCKED' " : " 'BLOCKED' "}})">
                                        {# Si le code du status du post est == a BLOCKED alors on ecrit Débloquer dans le bouton #}
                                        <i class="fas fa-minus-circle"></i> {{user.status.code == "BLOCKED" ? "Débloquer l'utilisateur" : "Bloquer l'utilisateur"}}
                                    </button>
                                    {{ include('backend/user/_delete.html.twig') }}
                                </td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>{% endblock %}
{% block javascripts %}
<script>
    // On récupère l'url de base du server grâce à window.location
    var baseUrl = window.location.origin;
    // Element = Element html du select que l'on a grâce au 'this' dans le onchange du select.
    // PostId = l'id de l'user envoyé en 2ème paramètre grâce à Twig
    function handleStatusButtonAd(elementButton, postId, statusCode) {
        // console.log(postId);
        // console.log(window.location)
        // console.log(baseUrl);
        // console.log(elementButton);
        // On utilise ajax pour faire une requête http en mode "rest" donc sans render
        $.ajax({
            method: "PATCH",
            url: baseUrl + "/backend/" + postId + "/status/" + statusCode,
            // En cas de succès on affiche un toast confirmant le changement de rôle du user.
            success: function (result) {
                toastr.success('Statut mis à jour');
                elementButton.textContent = statusCode == "BLOCKED" ? "Débloquer l'annonce" : "Bloquer l'annonce";
                elementButton.onclick = function () {
                    return handleStatusButtonAd(elementButton, postId, statusCode == "BLOCKED" ? "UNBLOCKED" : "BLOCKED")
                };
            },
            error: function () {
                toastr.error('Impossible de mettre à jour le statut.')

            }
        });
    }
       
        // Element = Element html du select que l'on a grâce au 'this' dans le onchange du select.
        // UserId = l'id de l'user envoyé en 2ème paramètre grâce à Twig
        function handleRoleSelect(element, userId) {
            // console.log(element.value); A décommenter si besoin
            // console.log(userId);
            // console.log(window.location)
            // console.log(baseUrl);
            // On utilise ajax pour faire une requête http en mode "rest" donc sans render
            $.ajax({
                method: "PATCH",
                url: baseUrl + "/backend/user/" + userId + "/role/" + element.value,
                // En cas de succès on affiche un toast confirmant le changement de rôle du user.
                success: function (result) {
                    toastr.success('Le rôle de ' + result.firstname + ' a été mis à jour');
                },
                error: function () {
                    toastr.error('Impossible de mettre à jour le rôle, veuillez réessayer.')
                }
            });
        }
        function handleStatusButtonUser(elementButton, userId, statusCode) {
            // console.log(postId);
            // console.log(window.location)
            // console.log(baseUrl);
            // console.log(elementButton);
            // On utilise ajax pour faire une requête http en mode "rest" donc sans render
            $.ajax({
                method: "PATCH",
                url: baseUrl + "/backend/user/" + userId + "/status/" + statusCode,

                // En cas de succès on affiche un toast confirmant le changement de rôle du user.
                success: function (result) {
                    toastr.success('Statut mis à jour');
                    elementButton.textContent = statusCode == "BLOCKED" ? "Débloquer l'utilisateur" : "Bloquer l'utilisateur";
                    elementButton.onclick = function () {
                        return handleStatusButtonUser(elementButton, userId, statusCode == "BLOCKED" ? "UNBLOCKED" : "BLOCKED")
                    };
                },
                error: function () {
                    toastr.error('Impossible de mettre à jour le statut.')

                }
            });
        }


        function handleStatusButtonComment(elementButton, commentId, statusCode) {
            // console.log(postId);
            // console.log(window.location)
            console.log(baseUrl);
            // console.log(elementButton);
            // On utilise ajax pour faire une requête http en mode "rest" donc sans render
            $.ajax({
                method: "PATCH",
                url: baseUrl + "/backend/comment/" + commentId + "/status/" + statusCode,
                // En cas de succès on affiche un toast confirmant le changement de rôle du user.
                success: function (result) {
                    console.log(toastr);
                    toastr.success('Statut mis à jour');
                    elementButton.textContent = statusCode == "BLOCKED" ? "Débloquer le commentaire" : "Bloquer le commentaire";
                    elementButton.onclick = function () {
                        return handleStatusButtonComment(elementButton, commentId, statusCode == "BLOCKED" ? "UNBLOCKED" : "BLOCKED")
                    };
                },
                error: function () {
                    toastr.error('Impossible de mettre à jour le statut.')

                }
            });
        }










    
      
      
    
</script>{% endblock %}
